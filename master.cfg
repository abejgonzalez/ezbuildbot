from buildbot.plugins import *
import os

c = BuildmasterConfig = {}

BUILDBOT_ADMIN_PORT = int(os.environ['BUILDBOT_ADMIN_PORT'])
BUILDBOT_COMMS_PORT = int(os.environ['BUILDBOT_COMMS_PORT'])

#______________________________________________________________________
c['workers'] = [ \
    worker.Worker('worker1', 'password'), \
    worker.Worker('worker2', 'password'), \
    worker.Worker('worker3', 'password'), \
    worker.Worker('worker4', 'password') \
]
all_workers = ['worker1', 'worker2', 'worker3', 'worker4']

#______________________________________________________________________
checkout = steps.Git(repourl='git://github.com/ucb-bar/project-template.git', mode='incremental')

# setup the steps to run
spawner_f = util.BuildFactory()
spawner_f.addStep(steps.Trigger(schedulerNames=['rvtools'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(schedulerNames=['verilator'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(schedulerNames=['esp_tools'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(schedulerNames=['prep_spawn'], waitForFinish=True))

rvtools_s = schedulers.Triggerable(name='rvtools', builderNames=['Build RISC-V Tools'])
rvtools_f = util.BuildFactory()
rvtools_f.addStep(checkout)
rvtools_f.addStep(steps.ShellCommand(command=["ls", "-alh", "/var/log"]))
rvtools_f.addStep(steps.ShellCommand(command=["ls", "-alh", "/var/log/container-data"]))
rvtools_f.addStep(steps.ShellCommand(command=["touch", "/var/log/container-data/THIS_WORKS"]))

verilator_s = schedulers.Triggerable(name='verilator', builderNames=['Build Verilator'])
verilator_f = util.BuildFactory()
verilator_f.addStep(checkout)

esp_tools_s = schedulers.Triggerable(name='esp_tools', builderNames=['Build ESP Tools'])
esp_tools_f = util.BuildFactory()
esp_tools_f.addStep(checkout)

prep_spawn_s = schedulers.Triggerable(name='prep_spawn', builderNames=['Spawn Prepare Steps'])
prep_spawn_f = util.BuildFactory()
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_hwacha'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_boom'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_boomexample'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_boomrocketexample'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_rocketchip'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_example'], waitForFinish=False))

prep_hwacha_s = schedulers.Triggerable(name='prep_hwacha', builderNames=['Prep. Hwacha'])
prep_hwacha_f = util.BuildFactory()
prep_hwacha_f.addStep(checkout)
prep_hwacha_f.addStep(steps.Trigger(schedulerNames=['hwacha_test'], waitForFinish=False))

prep_boom_s = schedulers.Triggerable(name='prep_boom', builderNames=['Prep. BOOM'])
prep_boom_f = util.BuildFactory()
prep_boom_f.addStep(checkout)
prep_boom_f.addStep(steps.Trigger(schedulerNames=['boom_test'], waitForFinish=False))

prep_boomexample_s = schedulers.Triggerable(name='prep_boomexample', builderNames=['Prep. BOOM Example'])
prep_boomexample_f = util.BuildFactory()
prep_boomexample_f.addStep(checkout)
prep_boomexample_f.addStep(steps.Trigger(schedulerNames=['boomexample_test'], waitForFinish=False))

prep_boomrocketexample_s = schedulers.Triggerable(name='prep_boomrocketexample', builderNames=['Prep. BOOM/Rocket Example'])
prep_boomrocketexample_f = util.BuildFactory()
prep_boomrocketexample_f.addStep(checkout)
prep_boomrocketexample_f.addStep(steps.Trigger(schedulerNames=['boomrocketexample_test'], waitForFinish=False))

prep_rocketchip_s = schedulers.Triggerable(name='prep_rocketchip', builderNames=['Prep. Rocket Chip'])
prep_rocketchip_f = util.BuildFactory()
prep_rocketchip_f.addStep(checkout)
prep_rocketchip_f.addStep(steps.Trigger(schedulerNames=['rocketchip_test'], waitForFinish=False))

prep_example_s = schedulers.Triggerable(name='prep_example', builderNames=['Prep. Example'])
prep_example_f = util.BuildFactory()
prep_example_f.addStep(checkout)
prep_example_f.addStep(steps.Trigger(schedulerNames=['example_test'], waitForFinish=False))

hwacha_test_s = schedulers.Triggerable(name='hwacha_test', builderNames=['Hwacha Tests'])
hwacha_test_f = util.BuildFactory()
hwacha_test_f.addStep(checkout)

boom_test_s = schedulers.Triggerable(name='boom_test', builderNames=['BOOM Tests'])
boom_test_f = util.BuildFactory()
boom_test_f.addStep(checkout)

boomexample_test_s = schedulers.Triggerable(name='boomexample_test', builderNames=['BOOM Example Tests'])
boomexample_test_f = util.BuildFactory()
boomexample_test_f.addStep(checkout)

boomrocketexample_test_s = schedulers.Triggerable(name='boomrocketexample_test', builderNames=['BOOM/Rocket Tests'])
boomrocketexample_test_f = util.BuildFactory()
boomrocketexample_test_f.addStep(checkout)

rocketchip_test_s = schedulers.Triggerable(name='rocketchip_test', builderNames=['Rocket Chip Tests'])
rocketchip_test_f = util.BuildFactory()
rocketchip_test_f.addStep(checkout)

example_test_s = schedulers.Triggerable(name='example_test', builderNames=['Example Tests'])
example_test_f = util.BuildFactory()
example_test_f.addStep(checkout)

c['builders'] = [ \
    util.BuilderConfig(name='Spawn Jobs', factory=spawner_f, workernames=all_workers), \

    util.BuilderConfig(name='Build RISC-V Tools', factory=rvtools_f, workernames=all_workers), \
    util.BuilderConfig(name='Build Verilator', factory=verilator_f, workernames=all_workers), \
    util.BuilderConfig(name='Build ESP Tools', factory=esp_tools_f, workernames=all_workers), \

    util.BuilderConfig(name='Spawn Prepare Steps', factory=prep_spawn_f, workernames=all_workers), \

    util.BuilderConfig(name='Prep. Hwacha', factory=prep_hwacha_f, workernames=all_workers), \
    util.BuilderConfig(name='Prep. BOOM', factory=prep_boom_f, workernames=all_workers), \
    util.BuilderConfig(name='Prep. BOOM Example', factory=prep_boomexample_f, workernames=all_workers), \
    util.BuilderConfig(name='Prep. BOOM/Rocket Example', factory=prep_boomrocketexample_f, workernames=all_workers), \
    util.BuilderConfig(name='Prep. Rocket Chip', factory=prep_rocketchip_f, workernames=all_workers), \
    util.BuilderConfig(name='Prep. Example', factory=prep_example_f, workernames=all_workers), \

    util.BuilderConfig(name='Hwacha Tests', factory=hwacha_test_f, workernames=all_workers), \
    util.BuilderConfig(name='BOOM Tests', factory=boom_test_f, workernames=all_workers), \
    util.BuilderConfig(name='BOOM Example Tests', factory=boomexample_test_f, workernames=all_workers), \
    util.BuilderConfig(name='BOOM/Rocket Tests', factory=boomrocketexample_test_f, workernames=all_workers), \
    util.BuilderConfig(name='Rocket Chip Tests', factory=rocketchip_test_f, workernames=all_workers), \
    util.BuilderConfig(name='Example Tests', factory=example_test_f, workernames=all_workers), \
]


#______________________________________________________________________
spawner = schedulers.AnyBranchScheduler( \
    name='spawner', \
    builderNames=['Spawn Jobs'], \
    change_filter = util.ChangeFilter( \
        project='ucb-bar/project-template'))

forcer = schedulers.ForceScheduler( \
    name="force", \
    builderNames=['Spawn Jobs'])

c['schedulers'] = [
    forcer,
    spawner, 
    rvtools_s, 
    verilator_s, 
    esp_tools_s, 
    prep_spawn_s,
    prep_hwacha_s, 
    prep_boom_s, 
    prep_boomexample_s, 
    prep_boomrocketexample_s,
    prep_rocketchip_s, 
    prep_example_s,
    hwacha_test_s,
    boom_test_s,
    boomexample_test_s,
    boomrocketexample_test_s,
    rocketchip_test_s,
    example_test_s]

#______________________________________________________________________
c['protocols'] = {'pb': {'port': BUILDBOT_COMMS_PORT}}

#______________________________________________________________________
c['buildbotURL'] = f'http://localhost:{BUILDBOT_ADMIN_PORT}/'

#______________________________________________________________________
c['www'] = dict(port=BUILDBOT_ADMIN_PORT, \
                plugins=dict( \
                    waterfall_view={True}, \
                    console_view={True}, \
                    grid_view={True}), \
                change_hook_dialects={'github':{'secret': None, 'pullrequest_ref':'direct'}})
