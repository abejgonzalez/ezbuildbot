from buildbot.plugins import *
import os

c = BuildmasterConfig = {}

BB_ADMIN_PORT = int(os.environ['BB_ADMIN_PORT'])
BB_COMMS_PORT = int(os.environ['BB_COMMS_PORT'])

c['buildbotNetUsageData'] = None

c['title'] = 'Chipyard CI'

c['protocols'] = {'pb': {'port': BB_COMMS_PORT}}

c['buildbotURL'] = f'http://localhost:{BB_ADMIN_PORT}/'

c['www'] = dict(
        port=BB_ADMIN_PORT,
        plugins=dict(
            waterfall_view={True},
            console_view={True},
            grid_view={True}),
        change_hook_dialects={'github':{'secret': None, 'pullrequest_ref':'head'}})

#----------------------------------------------------------------------
# setup workers
#----------------------------------------------------------------------
worker_sets = [
    ['chipyard-worker-1', 'password'],
    ['chipyard-worker-2', 'password']]

worker_names = []
for w in worker_sets:
    worker_names.append(w[0])

c['workers'] = []
for w in worker_sets:
    print("Adding \"" + w[0] + "\" with password \"" + w[1] + "\"")
    c['workers'].append(worker.Worker(w[0], w[1]))

#----------------------------------------------------------------------
checkout = steps.Git(repourl='git://github.com/abejgonzalez/chipyard.git')
cleanup = steps.ShellCommand(command=['rm', '-rf', '../riscv-tools-install', '../esp-tools-install', '../esp-tools.hash', '../riscv-tools.hash', '../env.sh'])

# setup the steps to run
spawner_f = util.BuildFactory()
spawner_f.addStep(steps.Trigger(schedulerNames=['rvtools'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(schedulerNames=['verilator'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(schedulerNames=['esp_tools'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(schedulerNames=['prep_spawn'], waitForFinish=True))

rvtools_s = schedulers.Triggerable(name='rvtools', builderNames=['Build RISC-V Tools'])
rvtools_f = util.BuildFactory()
rvtools_f.addStep(checkout)
rvtools_f.addStep(steps.ShellCommand(command=['ls', '-alh', '../.']))
rvtools_f.addStep(steps.ShellCommand(command=['./.buildbot/create-hash.sh']))
rvtools_f.addStep(steps.ShellCommand(command=['./.buildbot/retrieve-cache.sh', 'riscv-tools-install', 'riscv-tools.hash', 'riscv-tools-install']))
rvtools_f.addStep(steps.ShellCommand(command=['./.buildbot/build-toolchains.sh', 'riscv-tools']))
rvtools_f.addStep(steps.ShellCommand(command=['./.buildbot/save-cache.sh', 'riscv-tools-install', 'riscv-tools.hash', 'riscv-tools-install']))
rvtools_f.addStep(cleanup)

verilator_s = schedulers.Triggerable(name='verilator', builderNames=['Build Verilator'])
verilator_f = util.BuildFactory()
verilator_f.addStep(checkout)
verilator_f.addStep(steps.ShellCommand(command=['./.buildbot/retrieve-cache.sh', 'verilator-install', 'build/sims/verisim/verilator.mk', 'build/sims/verisim/verilator']))
verilator_f.addStep(steps.ShellCommand(command=['./.buildbot/build-verilator.sh']))
verilator_f.addStep(steps.ShellCommand(command=['./.buildbot/save-cache.sh', 'verilator-install', 'build/sims/verisim/verilator.mk', 'build/sims/verisim/verilator']))
verilator_f.addStep(cleanup)

esp_tools_s = schedulers.Triggerable(name='esp_tools', builderNames=['Build ESP Tools'])
esp_tools_f = util.BuildFactory()
esp_tools_f.addStep(checkout)
esp_tools_f.addStep(steps.ShellCommand(command=['./.buildbot/create-hash.sh']))
esp_tools_f.addStep(steps.ShellCommand(command=['./.buildbot/retrieve-cache.sh', 'esp-tools-install', 'esp-tools.hash', 'esp-tools-install']))
esp_tools_f.addStep(steps.ShellCommand(command=['./.buildbot/build-toolchains.sh', 'esp-tools']))
esp_tools_f.addStep(steps.ShellCommand(command=['./.buildbot/save-cache.sh', 'esp-tools-install', 'esp-tools.hash', 'esp-tools-install']))
esp_tools_f.addStep(cleanup)

prep_spawn_s = schedulers.Triggerable(name='prep_spawn', builderNames=['Spawn Prepare Steps'])
prep_spawn_f = util.BuildFactory()
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_hwacha'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_boom'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_boomexample'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_boomrocketexample'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_rocketchip'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(schedulerNames=['prep_example'], waitForFinish=False))
prep_spawn_f.addStep(cleanup)

# checkout files and get the cached riscv-tools and verilator
def prep_steps_add(f, name, next_schedule):
    f.addStep(checkout)
    f.addStep(steps.ShellCommand(command=['ls', '-alh', '../.']))
    # get cached state
    f.addStep(steps.ShellCommand(command=['./.buildbot/create-hash.sh']))
    f.addStep(steps.ShellCommand(command=['./.buildbot/retrieve-cache.sh', 'riscv-tools-install', 'riscv-tools.hash', 'riscv-tools-install']))
    f.addStep(steps.ShellCommand(command=['./.buildbot/retrieve-cache.sh', 'verilator-install', 'build/sims/verisim/verilator.mk', 'build/sims/verisim/verilator']))
    # build rtl
    if name == 'boomrocketexample':
        f.addStep(steps.ShellCommand(command=['./.buildbot/do-rtl-build.sh', 'SUBPROJECT=example', 'CONFIG=SmallDefaultBoomAndRocketConfig']))
    else:
        f.addStep(steps.ShellCommand(command=['./.buildbot/do-rtl-build.sh', 'SUBPROJECT='+name]))
    # save state
    f.addStep(steps.ShellCommand(command=['git', 'rev-parse', 'HEAD', '>', '../commit.hash']))
    f.addStep(steps.ShellCommand(command=['./.buildbot/save-cache.sh', name, 'commit.hash', 'build']))
    f.addStep(cleanup)
    f.addStep(steps.Trigger(schedulerNames=[next_schedule], waitForFinish=False))

prep_hwacha_s = schedulers.Triggerable(name='prep_hwacha', builderNames=['Prep. Hwacha'])
prep_hwacha_f = util.BuildFactory()
prep_steps_add(prep_hwacha_f, 'hwacha', 'hwacha_test')

prep_boom_s = schedulers.Triggerable(name='prep_boom', builderNames=['Prep. BOOM'])
prep_boom_f = util.BuildFactory()
prep_steps_add(prep_boom_f, 'boom', 'boom_test')

prep_boomexample_s = schedulers.Triggerable(name='prep_boomexample', builderNames=['Prep. BOOM Example'])
prep_boomexample_f = util.BuildFactory()
prep_steps_add(prep_boomexample_f, 'boomexample', 'boomexample_test')

prep_boomrocketexample_s = schedulers.Triggerable(name='prep_boomrocketexample', builderNames=['Prep. BOOM/Rocket Example'])
prep_boomrocketexample_f = util.BuildFactory()
prep_steps_add(prep_boomrocketexample_f, 'boomrocketexample', 'boomrocketexample_test')

prep_rocketchip_s = schedulers.Triggerable(name='prep_rocketchip', builderNames=['Prep. Rocket Chip'])
prep_rocketchip_f = util.BuildFactory()
prep_steps_add(prep_rocketchip_f, 'rocketchip', 'rocketchip_test')

prep_example_s = schedulers.Triggerable(name='prep_example', builderNames=['Prep. Example'])
prep_example_f = util.BuildFactory()
prep_steps_add(prep_example_f, 'example', 'example_test')

def run_test_step(f, name):
    f.addStep(checkout)
    f.addStep(steps.ShellCommand(command=['ls', '-alh', '../.']))
    # get cached state
    f.addStep(steps.ShellCommand(command=['./.buildbot/create-hash.sh']))
    f.addStep(steps.ShellCommand(command=['./.buildbot/retrieve-cache.sh', 'riscv-tools-install', 'riscv-tools.hash', 'riscv-tools-install']))
    f.addStep(steps.ShellCommand(command=['git', 'rev-parse', 'HEAD', '>', '../commit.hash']))
    f.addStep(steps.ShellCommand(command=['./.buildbot/retrieve-cache.sh', name, 'commit.hash', 'build']))
    # run test
    if name == 'boomrocketexample':
        f.addStep(steps.ShellCommand(command=['make', 'run-bmark-tests', '-C', 'sims/verisim', 'SUBPROJECT=example', 'CONFIG=SmallDefaultBoomAndRocketConfig']))
    else:
        f.addStep(steps.ShellCommand(command=['make', 'run-bmark-tests', '-C', 'sims/verisim', 'SUB_PROJECT='+name]))
    f.addStep(cleanup)

hwacha_test_s = schedulers.Triggerable(name='hwacha_test', builderNames=['Hwacha Tests'])
hwacha_test_f = util.BuildFactory()
run_test_step(hwacha_test_f, 'hwacha')

boom_test_s = schedulers.Triggerable(name='boom_test', builderNames=['BOOM Tests'])
boom_test_f = util.BuildFactory()
run_test_step(boom_test_f, 'boom')

boomexample_test_s = schedulers.Triggerable(name='boomexample_test', builderNames=['BOOM Example Tests'])
boomexample_test_f = util.BuildFactory()
run_test_step(boomexample_test_f, 'boomexample')

boomrocketexample_test_s = schedulers.Triggerable(name='boomrocketexample_test', builderNames=['BOOM/Rocket Tests'])
boomrocketexample_test_f = util.BuildFactory()
run_test_step(boomrocketexample_test_f, 'boomrocketexample')

rocketchip_test_s = schedulers.Triggerable(name='rocketchip_test', builderNames=['Rocket Chip Tests'])
rocketchip_test_f = util.BuildFactory()
run_test_step(rocketchip_test_f, 'rocketchip')

example_test_s = schedulers.Triggerable(name='example_test', builderNames=['Example Tests'])
example_test_f = util.BuildFactory()
run_test_step(example_test_f, 'example')

def builder(name, factory):
    return util.BuilderConfig(name=name, factory=factory, workerbuilddir='', workernames=worker_names)

c['builders'] = [
    builder(name='Spawn Jobs', factory=spawner_f),

    builder(name='Build RISC-V Tools',factory=rvtools_f),
    builder(name='Build Verilator', factory=verilator_f),
    builder(name='Build ESP Tools', factory=esp_tools_f),

    builder(name='Spawn Prepare Steps', factory=prep_spawn_f),

    builder(name='Prep. Hwacha', factory=prep_hwacha_f),
    builder(name='Prep. BOOM', factory=prep_boom_f),
    builder(name='Prep. BOOM Example', factory=prep_boomexample_f),
    builder(name='Prep. BOOM/Rocket Example', factory=prep_boomrocketexample_f),
    builder(name='Prep. Rocket Chip', factory=prep_rocketchip_f),
    builder(name='Prep. Example', factory=prep_example_f),

    builder(name='Hwacha Tests', factory=hwacha_test_f),
    builder(name='BOOM Tests', factory=boom_test_f),
    builder(name='BOOM Example Tests', factory=boomexample_test_f),
    builder(name='BOOM/Rocket Tests', factory=boomrocketexample_test_f),
    builder(name='Rocket Chip Tests', factory=rocketchip_test_f),
    builder(name='Example Tests', factory=example_test_f),
]

#----------------------------------------------------------------------

pull_req_s = schedulers.SingleBranchScheduler(
    name='pull req scheduler',
    builderNames=['Spawn Jobs'],
    treeStableTimer=5,
    change_filter = util.ChangeFilter(category='pull', project='abejgonzalez/chipyard'))

master_s = schedulers.SingleBranchScheduler(
    name='master scheduler',
    builderNames=['Spawn Jobs'],
    treeStableTimer=5,
    change_filter = util.ChangeFilter(project='abejgonzalez/chipyard', branch=['master']))

forcer = schedulers.ForceScheduler(
    name="force",
    builderNames=['Spawn Jobs'])

c['schedulers'] = [
    forcer,
    master_s,
    pull_req_s,
    rvtools_s, 
    verilator_s, 
    esp_tools_s, 
    prep_spawn_s,
    prep_hwacha_s, 
    prep_boom_s, 
    prep_boomexample_s, 
    prep_boomrocketexample_s,
    prep_rocketchip_s, 
    prep_example_s,
    hwacha_test_s,
    boom_test_s,
    boomexample_test_s,
    boomrocketexample_test_s,
    rocketchip_test_s,
    example_test_s]
