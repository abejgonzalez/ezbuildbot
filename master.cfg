from buildbot.plugins import *
import os

c = BuildmasterConfig = {}

BB_ADMIN_PORT = int(os.environ['BB_ADMIN_PORT'])
BB_COMMS_PORT = int(os.environ['BB_COMMS_PORT'])

c['buildbotNetUsageData'] = None

c['title'] = 'Chipyard CI'

c['protocols'] = {'pb': {'port': BB_COMMS_PORT}}

c['buildbotURL'] = f'http://localhost:{BB_ADMIN_PORT}/'

c['www'] = dict(
        port=BB_ADMIN_PORT,
        plugins=dict(
            waterfall_view={True},
            console_view={True},
            grid_view={True}),
        change_hook_dialects={'github':{'secret': None, 'pullrequest_ref':'head'}})

#----------------------------------------------------------------------
# setup workers
#----------------------------------------------------------------------
worker_sets = [
    ['chipyard-worker-1', 'password'],
    ['chipyard-worker-2', 'password'],
    ['chipyard-worker-3', 'password'],
    ['chipyard-worker-4', 'password']]

worker_names = []
for w in worker_sets:
    worker_names.append(w[0])

c['workers'] = []
for w in worker_sets:
    print("Adding \"" + w[0] + "\" with password \"" + w[1] + "\"")
    c['workers'].append(worker.Worker(w[0], w[1]))

#----------------------------------------------------------------------
# setup build steps
#----------------------------------------------------------------------
checkout = steps.Git(name="Checkout code", haltOnFailure=True, repourl='git://github.com/abejgonzalez/chipyard.git')
cleanup = steps.ShellCommand(name="Cleanup", haltOnFailure=True, command=['rm', '-rf', '../riscv-tools-install', '../esp-tools-install', '../esp-tools.hash', '../riscv-tools.hash', '../env.sh'])

all_builders = []
all_schedulers = []

def builder(name, factory):
    return util.BuilderConfig(name=name, factory=factory, workerbuilddir='', workernames=worker_names)

def create_prep(builder_name, trigger_name, local_name, next_schedule):
    # create trigger to spawn build
    trigger_s = schedulers.Triggerable(name=trigger_name, builderNames=[builder_name])

    # create factory
    f = util.BuildFactory()
    f.addStep(checkout)
    f.addStep(steps.ShellCommand(name="ls -al", haltOnFailure=True, command=['ls', '-alh', '../.']))
    # get cached state
    f.addStep(steps.ShellCommand(name="Create hash", haltOnFailure=True, command=['./.buildbot/create-hash.sh']))
    f.addStep(steps.ShellCommand(name="Get riscv-tools", haltOnFailure=True, command=['./.buildbot/retrieve-cache.sh', 'riscv-tools-install', 'riscv-tools.hash', 'riscv-tools-install']))
    f.addStep(steps.ShellCommand(name="Get verilator", haltOnFailure=True, command=['./.buildbot/retrieve-cache.sh', 'verilator-install', 'build/sims/verisim/verilator.mk', 'build/sims/verisim/verilator']))
    # build rtl
    if local_name == 'boomrocketexample':
        f.addStep(steps.ShellCommand(name="Create RTL", haltOnFailure=True, command=['./.buildbot/do-rtl-build.sh', 'SUBPROJECT=example', 'CONFIG=SmallDefaultBoomAndRocketConfig']))
    else:
        f.addStep(steps.ShellCommand(name="Create RTL", haltOnFailure=True, command=['./.buildbot/do-rtl-build.sh', 'SUBPROJECT='+local_name]))
    # save state
    f.addStep(steps.ShellCommand(name="git rev-parse", haltOnFailure=True, command=['git', 'rev-parse', 'HEAD', '>', '../commit.hash']))
    f.addStep(steps.ShellCommand(name="Save RTL", haltOnFailure=True, command=['./.buildbot/save-cache.sh', local_name, 'commit.hash', 'build']))
    f.addStep(cleanup)
    f.addStep(steps.Trigger(name="Start RTL tests", haltOnFailure=True, schedulerNames=[next_schedule], waitForFinish=False))

    builder_b = builder(name=builder_name, factory=f)
    all_builders.append(builder_b)
    all_schedulers.append(trigger_s)

def create_test(builder_name, trigger_name, local_name):
    # create trigger to spawn build
    trigger_s = schedulers.Triggerable(name=trigger_name, builderNames=[builder_name])

    # create factory
    f = util.BuildFactory()
    f.addStep(checkout)
    f.addStep(steps.ShellCommand(name="ls -al", haltOnFailure=True, command=['ls', '-alh', '../.']))
    # get cached state
    f.addStep(steps.ShellCommand(name="Create hash", haltOnFailure=True, command=['./.buildbot/create-hash.sh']))
    f.addStep(steps.ShellCommand(name="Get riscv-tools", haltOnFailure=True, command=['./.buildbot/retrieve-cache.sh', 'riscv-tools-install', 'riscv-tools.hash', 'riscv-tools-install']))
    f.addStep(steps.ShellCommand(name="git rev-parse", haltOnFailure=True, command=['git', 'rev-parse', 'HEAD', '>', '../commit.hash']))
    f.addStep(steps.ShellCommand(name="Get RTL", haltOnFailure=True, command=['./.buildbot/retrieve-cache.sh', local_name, 'commit.hash', 'build']))
    # run test
    if local_name == 'boomrocketexample':
        f.addStep(steps.ShellCommand(name="Run tests", haltOnFailure=True, command=['make', 'run-bmark-tests', '-C', 'sims/verisim', 'SUBPROJECT=example', 'CONFIG=SmallDefaultBoomAndRocketConfig']))
    else:
        f.addStep(steps.ShellCommand(name="Run tests", haltOnFailure=True, command=['make', 'run-bmark-tests', '-C', 'sims/verisim', 'SUB_PROJECT='+local_name]))
    f.addStep(cleanup)

    builder_b = builder(name=builder_name, factory=f)
    all_builders.append(builder_b)
    all_schedulers.append(trigger_s)

# setup the steps to run
spawner_f = util.BuildFactory()
spawner_f.addStep(steps.Trigger(name="Spawn riscv-tools build", haltOnFailure=True, schedulerNames=['rvtools'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(name="Spawn verilator build", haltOnFailure=True, schedulerNames=['verilator'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(name="Spawn esp-tools build", haltOnFailure=True, schedulerNames=['esp_tools'], waitForFinish=True))
spawner_f.addStep(steps.Trigger(name="Spawn RTL builds/tests", haltOnFailure=True, schedulerNames=['prep_spawn'], waitForFinish=False))

rvtools_s = schedulers.Triggerable(name='rvtools', builderNames=['Build RISC-V Tools'])
rvtools_f = util.BuildFactory()
rvtools_f.addStep(checkout)
rvtools_f.addStep(steps.ShellCommand(name="Create hash", haltOnFailure=True, command=['./.buildbot/create-hash.sh']))
rvtools_f.addStep(steps.ShellCommand(name="Get riscv-tools", haltOnFailure=True, command=['./.buildbot/retrieve-cache.sh', 'riscv-tools-install', 'riscv-tools.hash', 'riscv-tools-install']))
rvtools_f.addStep(steps.ShellCommand(name="Build riscv-tools", haltOnFailure=True, command=['./.buildbot/build-toolchains.sh', 'riscv-tools']))
rvtools_f.addStep(steps.ShellCommand(name="Save riscv-tools", haltOnFailure=True, command=['./.buildbot/save-cache.sh', 'riscv-tools-install', 'riscv-tools.hash', 'riscv-tools-install']))
rvtools_f.addStep(cleanup)

esp_tools_s = schedulers.Triggerable(name='esp_tools', builderNames=['Build ESP Tools'])
esp_tools_f = util.BuildFactory()
esp_tools_f.addStep(checkout)
esp_tools_f.addStep(steps.ShellCommand(name="Create hash", haltOnFailure=True, command=['./.buildbot/create-hash.sh']))
esp_tools_f.addStep(steps.ShellCommand(name="Get esp-tools", haltOnFailure=True, command=['./.buildbot/retrieve-cache.sh', 'esp-tools-install', 'esp-tools.hash', 'esp-tools-install']))
esp_tools_f.addStep(steps.ShellCommand(name="Build esp-tools", haltOnFailure=True, command=['./.buildbot/build-toolchains.sh', 'esp-tools']))
esp_tools_f.addStep(steps.ShellCommand(name="Save esp-tools", haltOnFailure=True, command=['./.buildbot/save-cache.sh', 'esp-tools-install', 'esp-tools.hash', 'esp-tools-install']))
esp_tools_f.addStep(cleanup)

verilator_s = schedulers.Triggerable(name='verilator', builderNames=['Build Verilator'])
verilator_f = util.BuildFactory()
verilator_f.addStep(checkout)
verilator_f.addStep(steps.ShellCommand(name="Get verilator", haltOnFailure=True, command=['./.buildbot/retrieve-cache.sh', 'verilator-install', 'build/sims/verisim/verilator.mk', 'build/sims/verisim/verilator']))
verilator_f.addStep(steps.ShellCommand(name="Build verilator", haltOnFailure=True, command=['./.buildbot/build-verilator.sh']))
verilator_f.addStep(steps.ShellCommand(name="Save verilator", haltOnFailure=True, command=['./.buildbot/save-cache.sh', 'verilator-install', 'build/sims/verisim/verilator.mk', 'build/sims/verisim/verilator']))
verilator_f.addStep(cleanup)

prep_spawn_s = schedulers.Triggerable(name='prep_spawn', builderNames=['Spawn Prepare Steps'])
prep_spawn_f = util.BuildFactory()
prep_spawn_f.addStep(steps.Trigger(name="Spawn Hwacha RTL build", haltOnFailure=True, schedulerNames=['prep_hwacha'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(name="Spawn BOOM RTL build", haltOnFailure=True, schedulerNames=['prep_boom'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(name="Spawn BOOM Example RTL build", haltOnFailure=True, schedulerNames=['prep_boomexample'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(name="Spawn BOOM Rocket RTL build", haltOnFailure=True, schedulerNames=['prep_boomrocketexample'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(name="Spawn Rocket Chip RTL build", haltOnFailure=True, schedulerNames=['prep_rocketchip'], waitForFinish=False))
prep_spawn_f.addStep(steps.Trigger(name="Spawn Example RTL build", haltOnFailure=True, schedulerNames=['prep_example'], waitForFinish=False))
prep_spawn_f.addStep(cleanup)

create_prep(                 'Prepare Hwacha',            'prep_hwacha',            'hwacha',            'hwacha_test')
create_prep(                   'Prepare BOOM',              'prep_boom',              'boom',              'boom_test')
create_prep(           'Prepare BOOM Example',       'prep_boomexample',       'boomexample',       'boomexample_test')
create_prep('Prepare BOOM and Rocket Example', 'prep_boomrocketexample', 'boomrocketexample', 'boomrocketexample_test')
create_prep(            'Prepare Rocket Chip',        'prep_rocketchip',        'rocketchip',        'rocketchip_test')
create_prep(                'Prepare Example',           'prep_example',           'example',           'example_test')

create_test(                 'Hwacha Tests',            'hwacha_test',            'hwacha')
create_test(                   'BOOM Tests',              'boom_test',              'boom')
create_test(           'BOOM Example Tests',       'boomexample_test',       'boomexample')
create_test('BOOM and Rocket Example Tests', 'boomrocketexample_test', 'boomrocketexample')
create_test(            'Rocket Chip Tests',        'rocketchip_test',        'rocketchip')
create_test(                'Example Tests',           'example_test',           'example')

initial_builders = [
    builder(name='Spawn Jobs', factory=spawner_f),

    builder(name='Build RISC-V Tools',factory=rvtools_f),
    builder(name='Build Verilator', factory=verilator_f),
    builder(name='Build ESP Tools', factory=esp_tools_f),

    builder(name='Spawn Prepare Steps', factory=prep_spawn_f),
]
c['builders'] = initial_builders + all_builders

#----------------------------------------------------------------------

pull_req_s = schedulers.SingleBranchScheduler(
    name='pull req scheduler',
    builderNames=['Spawn Jobs'],
    treeStableTimer=5,
    change_filter = util.ChangeFilter(category='pull', project='abejgonzalez/chipyard'))

master_s = schedulers.SingleBranchScheduler(
    name='master scheduler',
    builderNames=['Spawn Jobs'],
    treeStableTimer=5,
    change_filter = util.ChangeFilter(project='abejgonzalez/chipyard', branch=['master']))

forcer_s = schedulers.ForceScheduler(
    name="force",
    buttonName='Force Full Build',
    label='Force Full Build',
    builderNames=['Spawn Jobs'],

    # will generate a text input
    reason=util.StringParameter(
        name="reason",
        label="Reason for build:",
        required=False,
        size=80),

    # in case you don't require authentication this will display
    # input for user to type his name
    username=util.UserNameParameter(
        label="Who is starting the build:",
        size=80),

    codebases=[
        util.CodebaseParameter(
            "",
            label="Main repository",
            # will generate a combo box
            branch=util.ChoiceStringParameter(
            name="branch",
            choices=["master", "hest"],
            default="master"),

            # will generate nothing in the form, but revision, repository,
            # and project are needed by buildbot scheduling system so we
            # need to pass a value ("")
            revision=util.FixedParameter(name="revision", default=""),
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default=""),
        ),
    ],
)

global_schedulers = [forcer_s, master_s, pull_req_s]
setup_schedulers = [rvtools_s, verilator_s, esp_tools_s, prep_spawn_s]
c['schedulers'] = global_schedulers + setup_schedulers + all_schedulers
