# -*- python -*-
# ex: set filetype=python:

# This is a default sample-master.cfg that does nothing.
# Use the `./generate_config` script to generate a more useful one.

from buildbot.plugins import *
import os

# Pull some environment variables
BUILDBOT_ADMIN_PORT = int(os.environ["BUILDBOT_ADMIN_PORT"])
BUILDBOT_COMMS_PORT = int(os.environ["BUILDBOT_COMMS_PORT"])

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Sample config has a dummy worker
sample_worker_name = "exampleworker"
c['workers'] = [worker.Worker(sample_worker_name, "password123456")]

# Sample builder
factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='git://github.com/buildbot/hello-world.git', mode='incremental'))
factory.addStep(steps.ShellCommand(command=["trial", "hello"],
                                   env={"PYTHONPATH": "."}))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=[sample_worker_name],
      factory=factory))

# Sample scheduler
c['schedulers'] = [schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"])]

# Add buildbot communication port
c['protocols'] = {'pb': {'port': BUILDBOT_COMMS_PORT}}

# minimalistic config to activate new web UI
c['buildbotURL'] = "http://localhost:{port}/".format(port=BUILDBOT_ADMIN_PORT)
c['www'] = dict(port=BUILDBOT_ADMIN_PORT,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
