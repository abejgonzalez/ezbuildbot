#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  generate_config
#  Generate a master.cfg for buildbot based on a JSON/YAML configuration.

import ast
import astor
import copy
import sys
from functools import reduce
from typing import cast

from ezbuildbot_config import *
from ast_utils import *

# 0.5 is not compatible with Python >3.5
astor_version = astor.__version__.split(".")
assert int(astor_version[0]) >= 0 and int(
    astor_version[1]) > 5, "requires astor version 0.6 or higher"


def generate_step(factory: ast.expr, step: Tuple[str, str], module: ast.Module) -> List[ast.stmt]:
    assert isinstance(factory, ast.expr)
    assert isinstance(step, tuple)

    template_function: ast.FunctionDef = get_function(
        "template_create_step", module)

    check_signature(
        "def template_create_step(factory, name: str, command: str) -> None: pass", template_function)

    # Substitute name and command
    # deepcopy functions since the transformer will modify the source tree
    substituted_func = SubstituteVariablesExpr({
        "factory": factory,
        "name": ast.Str(step[0]),
        "command": ast.Str(step[1])
    }).visit(copy.deepcopy(template_function))

    # Return body of method
    body = substituted_func.body
    for n in body:
        assert isinstance(n, ast.stmt)
    return body


def generate_builder(builder: Builder, workernames: List[str], module: ast.Module) -> ast.FunctionDef:
    """
    Return a function that takes no arguments and returns a builder.
    """
    template_function: ast.FunctionDef = get_function(
        "template_create_builder", module)

    check_signature(
        "def template_create_builder(name: str, repourl: str, workernames: List[str]): pass", template_function)

    class ReplaceSteps(ast.NodeTransformer):
        def visit_Expr(self, node: ast.Expr) -> Any:
            # We are trying to replace something like
            # Expr(value=Call(func=Name(id='template_create_step_placeholder')))
            if not isinstance(node.value, ast.Call):
                return node
            call = cast(ast.Call, node.value)

            if not isinstance(call.func, ast.Name):
                return node
            func = cast(ast.Name, call.func)

            if not func.id == "template_create_step_placeholder":
                return node

            # Get the first arg as it is the factory name
            factory = call.args[0]

            # Generate steps
            return reduce(lambda x, y: x + y, map(lambda step: generate_step(factory, step, module), builder.steps))

    substituted_func = ReplaceSteps().visit(copy.deepcopy(template_function))
    # Also replace the variables.
    SubstituteVariablesExpr({
        "name": ast.Str(builder.name),
        "repourl": ast.Str(builder.git_url),
        "workernames": parse_const_from_object(workernames)
    }).visit(substituted_func)

    # Return a new function with no arguments
    return ast.FunctionDef(
        name=f"get_builder_{sanitize_name(builder.name)}",
        args=ast.arguments(args=[], vararg=None, kwonlyargs=[],
                           kwarg=None, defaults=[], kw_defaults=[]),
        body=substituted_func.body,
        decorator_list=[],
        returns=None)


def generate_get_builders(config: BuildbotConfig, module: ast.Module) -> ast.FunctionDef:
    """
    Generate the get_builders() function.
    """
    function: ast.FunctionDef = copy.deepcopy(
        get_function("get_builders", module))

    workernames = list(map(lambda worker: worker.name, config.workers))

    # Get all the builder functions
    builder_functions = list(
        map(lambda builder: generate_builder(builder, workernames, module), config.builders))

    # Add new function body
    function.body = create_aggregating_function_body(builder_functions)

    return function


def generate_worker(worker: Worker, module: ast.Module) -> ast.expr:
    function: ast.FunctionDef = get_function("template_create_worker", module)

    check_signature(
        "def template_create_worker(name: str, password: str) -> None: pass", function)

    # Substitute name and command
    # deepcopy functions since the transformer will modify the source tree
    substituted_func = SubstituteVariablesExpr({
        "name": ast.Str(worker.name),
        "password": ast.Str(worker.password)
    }).visit(copy.deepcopy(function))

    # Return body of method
    body = substituted_func.body
    assert len(body) == 1, "only supports single expression worker template for now"
    expr = body[0].value
    assert isinstance(expr, ast.expr)
    return expr


def generate_get_workers(config: BuildbotConfig, module: ast.Module) -> ast.FunctionDef:
    """
    Generate the get_workers() function.
    """
    function: ast.FunctionDef = copy.deepcopy(
        get_function("get_workers", module))

    # Create a return expression for an array of these functions
    return_expr: ast.stmt = ast.Return(value=ast.List(
        elts=list(map(lambda worker: generate_worker(worker, module), config.workers))
    ))

    # Add new function body
    function.body = [return_expr]

    return function


def generate_incoming_webhook(webhook: GitHubIncomingWebhook, module: ast.Module) -> ast.FunctionDef:
    """
    Generate a function that creates an incoming webhook.
    """
    function = get_function("template_github_incoming_webhook", module)

    return apply_templated_function_with_return(
        template=function,
        signature="def template_github_incoming_webhook(name: str, description: str, builders: List[str], filter_project: Optional[str]): ...",
        arguments={
            "name": webhook.name,
            "description": webhook.description,
            "builders": webhook.builders,
            "filter_project": webhook.filter_project
        },
        new_name=f"get_{sanitize_name(webhook.name)}"
    )


def generate_get_github_incoming_webhooks(config: BuildbotConfig, module: ast.Module) -> ast.FunctionDef:
    """
    Generate the get_github_incoming_webhooks() function.
    """
    function: ast.FunctionDef = copy.deepcopy(
        get_function("get_github_incoming_webhooks", module))

    # Get all the sub functions
    webhook_functions = list(
        map(lambda webhook: generate_incoming_webhook(webhook, module), config.github_incoming_webhooks))

    # Add new function body
    function.body = create_aggregating_function_body(webhook_functions)

    return function


def generate_github_status_comment_push(function: str, signature: str, push: GitHubStatusCommentPush, module: ast.Module) -> ast.FunctionDef:
    """
    Generate a function that creates a GitHub status or comment push
    depending on the argument.
    """
    function_template = get_function(function, module)

    return apply_templated_function_with_return(
        template=function_template,
        signature=signature,
        arguments={
            "token": push.token,
            "context": push.context,
            "builders": push.builders
        },
        new_name=f"get_{function}_{sanitize_name(str(hash(push)))}"
    )


def generate_github_comment_push(push: GitHubStatusCommentPush, module: ast.Module) -> ast.FunctionDef:
    """
    Generate a function that creates a GitHub comment push.
    """
    return generate_github_status_comment_push(
        function="template_github_comment_push",
        signature="def template_github_comment_push(token: str, context: str, builders: List[str]): ...",
        push=push,
        module=module
    )


def generate_github_status_push(push: GitHubStatusCommentPush, module: ast.Module) -> ast.FunctionDef:
    """
    Generate a function that creates a GitHub status push.
    """
    return generate_github_status_comment_push(
        function="template_github_status_push",
        signature="def template_github_status_push(token: str, context: str, builders: List[str]): ...",
        push=push,
        module=module
    )


def generate_get_github_status_comment_pushes(config: BuildbotConfig, module: ast.Module) -> ast.FunctionDef:
    """
    Generate the get_github_status_comment_pushes() function.
    """
    function: ast.FunctionDef = copy.deepcopy(
        get_function("get_github_status_comment_pushes", module))

    # Get all the sub functions
    status_functions = list(map(lambda push: generate_github_status_push(push, module), config.github_status_pushes))
    comment_functions = list(map(lambda push: generate_github_comment_push(push, module), config.github_comment_pushes))

    # Add new function body
    function.body = create_aggregating_function_body(status_functions + comment_functions)

    return function


def generate_get_github_change_hook_dialect(config: BuildbotConfig, module: ast.Module) -> ast.FunctionDef:
    """
    Generate a function that creates a GitHub status or comment push
    depending on the argument.
    """
    function_template = get_function("template_github_change_hook_dialect", module)

    return apply_templated_function_with_return(
        template=function_template,
        signature="def template_github_change_hook_dialect(secret: str): pass",
        arguments={
            "secret": config.github_webhook_secret
        },
        new_name="get_github_change_hook_dialect"
    )


def generate_get_hostname(config: BuildbotConfig, module: ast.Module) -> ast.FunctionDef:
    """
    Generate a function that creates a GitHub status or comment push
    depending on the argument.
    """
    function_template = get_function("get_hostname", module)

    newfunc = ast.parse(f"""
def get_hostname() -> str:
    return {repr(config.hostname)}
    """).body[0]
    assert isinstance(newfunc, ast.FunctionDef)

    return newfunc

def parse_template_tree(filename: str) -> ast.Module:
    with open(filename, 'r') as f:
        template_str = str(f.read())

    tree = ast.parse(template_str)
    return tree


def main(args) -> int:
    # Load template
    code = parse_template_tree(args[1])

    # Load config
    config = BuildbotConfig.from_filename(args[2])

    # Generate and substitute dummy methods
    code = ReplaceFunction({
        'get_builders': generate_get_builders(config, code),
        'get_workers': generate_get_workers(config, code),
        'get_github_incoming_webhooks': generate_get_github_incoming_webhooks(config, code),
        'get_github_status_comment_pushes': generate_get_github_status_comment_pushes(config, code),
        'get_github_change_hook_dialect': generate_get_github_change_hook_dialect(config, code),
        'get_hostname': generate_get_hostname(config, code)
    }).visit(copy.deepcopy(code))

    # Remove templates
    code = RemoveFunction({
        'template_create_step',
        'template_create_builder',
        'template_create_worker',
        'template_github_incoming_webhook',
        'template_github_comment_push',
        'template_github_status_push',
        'template_github_change_hook_dialect'
    }).visit(copy.deepcopy(code))

    print(astor.to_source(code, indent_with="  "))
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
